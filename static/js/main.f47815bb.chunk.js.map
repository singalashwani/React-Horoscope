{"version":3,"sources":["Signs.jsx","Timeframe.jsx","Horoscope.jsx","App.js","serviceWorker.js","index.js"],"names":["Signs","parentCallbackSelectedSign","useState","signs","setSigns","useEffect","a","axios","get","response","console","log","data","getData","className","map","sign","index","key","onClick","signClick","Timeframe","parentCallbackSelectedTimeframe","timeframe","timeframeClick","Horoscope","props","horoscope","setHoroscope","App","signSelectedByUser","setSignSelectedByUser","timeframeSelectedByUser","settimeframeSelectedByUser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qSAgCeA,EA7BH,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,2BAAiC,EAEpBC,mBAAS,IAFW,mBAEvCC,EAFuC,KAEhCC,EAFgC,KAI5CC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACyBC,IAAMC,IAAI,oDADnC,OACQC,EADR,OAEIC,QAAQC,IAAIF,EAASG,MACrBR,EAASK,EAASG,MAHtB,4CADY,uBAAC,WAAD,wBAMZC,KACD,IAMH,OACI,oCACI,wBAAIC,UAAU,eAAd,sBACA,yBAAKA,UAAU,SACdX,EAAMY,KAAI,SAACC,EAAMC,GACd,OAAO,4BAAQC,IAAKD,EAAOH,UAAU,wBAAwBK,QAAS,YATlE,SAACH,GACbf,EAA2Be,GAQ0DI,CAAUJ,KAASA,SCLjGK,EAlBC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,gCAMf,OACI,oCACI,wBAAIR,UAAU,eAAd,2BACA,yBAAKA,UAAU,SACd,CAAC,YAAa,QAAS,YAAYC,KAAI,SAACQ,EAAWN,GAChD,OAAO,4BAAQC,IAAKD,EAAOH,UAAU,wBAAwBK,QAAS,YAT7D,SAACI,GAClBD,EAAgCC,GAQqDC,CAAeD,KAAcA,SCa3GE,EAvBC,SAACC,GAAW,IAAD,EAESxB,mBAAS,IAFlB,mBAElByB,EAFkB,KAEPC,EAFO,KAavB,OATAvB,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACyBC,IAAMC,IAAN,2DAA8DkB,EAAMV,KAApE,YAA4EU,EAAMH,YAD3G,OACQd,EADR,OAEIC,QAAQC,IAAIF,EAASG,KAAKe,WAC1BC,EAAanB,EAASG,KAAKe,WAH/B,4CADY,uBAAC,WAAD,wBAMZd,KACD,IAGC,oCACI,wBAAIC,UAAU,eAAeY,EAAMH,UAAnC,wBAAmEG,EAAMV,KAAzE,UACA,yBAAKF,UAAU,aACVa,KCwBFE,EArCL,WAAO,IAAD,EAEoC3B,qBAFpC,mBAET4B,EAFS,KAEWC,EAFX,OAG8C7B,qBAH9C,mBAGT8B,EAHS,KAGgBC,EAHhB,KAoBd,OACE,oCACA,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,eAAd,sBACEgB,GAAsB,kBAAC,EAAD,CAAO7B,2BArBpB,SAACe,GAClBN,QAAQC,IAAIK,GACZe,EAAsBf,MAoBfc,IAAuBE,GAA2B,kBAAC,EAAD,CAAWV,gCAjB9C,SAACC,GACvBb,QAAQC,IAAIY,GACZU,EAA2BV,MAgBpBS,GAA2B,kBAAC,EAAD,CAAWhB,KAAMc,EAAoBP,UAAWS,IAC5E,yBAAKlB,UAAU,0BAAyB,4BAAQA,UAAU,eAAeK,QAdrE,WACVY,EAAsB,IACtBE,EAA2B,MAYmB,eCxB9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.f47815bb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nlet Signs = ({ parentCallbackSelectedSign }) => {\r\n\r\n    let [signs, setSigns] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            let response = await axios.get('http://sandipbgt.com/theastrologer/api/sunsigns/');\r\n            console.log(response.data);\r\n            setSigns(response.data);\r\n        }\r\n        getData();\r\n    }, [])\r\n\r\n    let signClick = (sign) => {\r\n        parentCallbackSelectedSign(sign);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h5 className=\"text-center\">Please select Sign</h5>\r\n            <div className=\"signs\">\r\n            {signs.map((sign, index) => {\r\n                return <button key={index} className=\"btn btn-outline-light\" onClick={() => {signClick(sign)}}>{sign}</button>\r\n            })}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Signs;","import React from 'react';\r\n\r\nlet Timeframe = ({ parentCallbackSelectedTimeframe }) => {\r\n\r\n    let timeframeClick = (timeframe) => {\r\n        parentCallbackSelectedTimeframe(timeframe);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h5 className=\"text-center\">Please select Timeframe</h5>\r\n            <div className=\"signs\">\r\n            {['yesterday', 'today', 'tomorrow'].map((timeframe, index) => {\r\n                return <button key={index} className=\"btn btn-outline-light\" onClick={() => {timeframeClick(timeframe)}}>{timeframe}</button>\r\n            })}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Timeframe;","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nlet Horoscope = (props) => {\r\n\r\n    let [horoscope, setHoroscope] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            let response = await axios.get(`http://sandipbgt.com/theastrologer/api/horoscope/${props.sign}/${props.timeframe}`);\r\n            console.log(response.data.horoscope);\r\n            setHoroscope(response.data.horoscope);\r\n        }\r\n        getData();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <h5 className=\"text-center\">{props.timeframe}, your Horoscope for {props.sign} is...</h5>\r\n            <div className=\"horoscope\">\r\n                {horoscope}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Horoscope;","import React, {useState} from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Signs from './Signs';\nimport Timeframe from './Timeframe';\nimport Horoscope from './Horoscope';\n\nlet App = () => {\n\n  let [signSelectedByUser, setSignSelectedByUser] = useState();\n  let [timeframeSelectedByUser, settimeframeSelectedByUser] = useState();\n\n  let selectedSign = (sign) => {\n    console.log(sign); \n    setSignSelectedByUser(sign);\n  }\n  \n  let selectedTimeframe = (timeframe) => {\n    console.log(timeframe);  \n    settimeframeSelectedByUser(timeframe);\n  }\n\n  let reset = () => {\n    setSignSelectedByUser(\"\");\n    settimeframeSelectedByUser(\"\");\n  }\n\n  return (\n    <>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <h1 className=\"text-center\">The Horoscope App</h1>\n          {!signSelectedByUser && <Signs parentCallbackSelectedSign = {selectedSign} />}\n          {signSelectedByUser && !timeframeSelectedByUser && <Timeframe parentCallbackSelectedTimeframe = {selectedTimeframe} />}\n          {timeframeSelectedByUser && <Horoscope sign={signSelectedByUser} timeframe={timeframeSelectedByUser} />}\n          <div className=\"restartBtn text-center\"><button className=\"btn btn-info\" onClick={reset}>Reset</button></div>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}